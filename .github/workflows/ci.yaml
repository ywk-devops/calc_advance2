name: CI Test (Behave) and CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  behave-tests:
    runs-on: ubuntu-latest  # Use Linux OS

    permissions:
      issues: write
      checks: write
      pull-requests: write      

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4  #v3
      - name: print content of repo
        run: |
          ls

      # Step 2: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Specify the Python version

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install behave

      # Step 4: Run Tests from the features folder
      - name: Run Tests
        run: |
          mkdir -p test-results  # Ensure the directory exists
          behave features/ --junit --junit-directory=test-results # Specify the features folder and save results
          ls test-results/

      # Step 5a: Upload Test results
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/

      # Step 5b: Publish Test results
      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            test-results/**/*.xml
            test-results/*.xml
    
      # Step 6a: Create Issue
      - name: Create an issue
        if: failure()
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: |
            [${{ github.workflow }}] failed during [${{ github.event_name }}]
          assignees: ${{ github.actor }},${{ github.triggering_actor }}
          body: |
            ## Failure Report:
            
            > [!IMPORTANT]
            > Details on failed run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
            - Author: @${{ github.triggering_actor }}
            - Branch: `${{ github.ref }}`
            - Commit: ${{ github.sha }}
            - Workflow Path: `${{ github.workflow_ref }}`
    
            - [ ] **Task**: Review failed run, fix the issue(s), and re-run until successful.
    
            > This issue was created automatically by GitHub, 
            > through `dacbd/create-issue-action@main` action
            > and KemingHe's contribution.
            > **DO NOT** close this issue until resolved.

      # Step 6b: Send Telegram Message on failure
      - name: Send Telegram Message
        if: failure()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
          -d chat_id="${TELEGRAM_CHAT_ID}" \
          -d text="Review failed run, fix the issue(s), and re-run until successful."
            
      # Step 6c: Annotate Test Failures (optional)
      - name: Annotate Test Failures
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const resultsPath = path.join('test-results', 'TESTS-calculator.xml');
            const results = fs.readFileSync(resultsPath, 'utf8');
            core.setFailed(`Test Failures Detected:\n${results}`);

      # Step 7: CD (Prepare files for deployment)
      - name: Prepare files
        run: |
          mkdir -p release
          cp -r ./calculator_pre_release.py ./release/calculator.py
          echo "Deployment files prepared."
          ls -l ./release/
      
      # Step 8: Upload files to AWS S3
      - name: Upload to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
        run: |
          aws s3 cp ./release s3://devops-calculator-app/release-files --recursive

      # Step 9: Download as zip and store in current action run
      - name: Archive project files
        run: |
          zip -r deployment_files.zip ./release
          mkdir -p artifacts
          mv deployment_files.zip artifacts/          
